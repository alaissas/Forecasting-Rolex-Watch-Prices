# -*- coding: utf-8 -*-
"""Forecasting_Rolex_Watch_Prices_Alaissa_Shaikh.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HYKyxvG5lHHnZIuTeRO6NA8JMrGhR6Cs

### **FORECASTING ROLEX WATCH PRICES: A TIME SERIES APPROACH USING ARIMA MODEL**

---

#### **PROJECT BY: ALAISSA SHAIKH**

---

#### **AIM**: To analyze historical Rolex watch price trends and develop a reliable time series forecasting model using ARIMA to predict future average prices from 2025 to 2027.

---

#### **OBJECTIVES**:
1.   **Data Exploration**: To perform exploratory data analysis (EDA) on historical Rolex watch prices to understand distribution, outliers, and yearly trends.

1.   **Data Aggregation**: To compute and visualize the average Rolex price for each year from 2010 to 2024.

1.   **Time Series Analysis**: To decompose the time series into trend, seasonal, and residual components for better understanding of data behavior.

1.   **Model Building**: To fit an ARIMA model based on ACF/PACF analysis and evaluate its performance using training and testing data.

1.   **Forecasting**: To predict the average Rolex watch prices for the next three years (2025–2027) with confidence intervals.

1.   **Model Evaluation**: To assess the model’s performance using RMSE and MAE metrics on a hold-out test set (2023–2024).

---

#### **1. Importing Required Libraries**

*   **pandas**: for data handling.

*   **matplotlib/seaborn**: for plotting.

*   **warnings**: to suppress warnings.

*   **statsmodels**: for time series modeling (ARIMA and decomposition).

*   **sklearn.metrics**: for evaluation metrics like RMSE and MAE.

*   **numpy**: numerical calculations.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.seasonal import seasonal_decompose
import statsmodels.graphics.tsaplots as sgt
from sklearn.metrics import mean_squared_error, mean_absolute_error
import numpy as np

warnings.filterwarnings("ignore")

"""#### **2. Loading and Cleaning the Data**

*   Reads the CSV data.

*   Converts the year_of_production to numeric, coercing invalid values to NaN.

*   Removes rows where either year_of_production or price is missing.

*   Filters for data only from 2010 onwards.
"""

df = pd.read_csv("/content/df.csv")
df.head()

df['year_of_production'] = pd.to_numeric(df['year_of_production'], errors='coerce')
df = df.dropna(subset=['year_of_production', 'price'])
df = df[df['year_of_production'] >= 2010]

"""#### **3. Exploratory Data Analysis (EDA)**

#### **A. Price Distribution**
"""

plt.figure(figsize=(10, 4))
sns.histplot(df['price'], bins=30, kde=True)
plt.title("Price Distribution")
plt.xlabel("Price (USD)")
plt.tight_layout()
plt.show()

"""**The Rolex price distribution is highly skewed to the right, meaning most watches are in a lower price range with a few very expensive ones.**

**This skewness is important for your price prediction project because it:**

*   Affects model choice: Some models work better with normally distributed data.

*   Impacts evaluation: Standard error metrics can be misleading.

*   Requires careful data splitting: Ensure both training and test sets reflect the skew.

*   Suggests potential need for target variable transformation (e.g., log transformation) to improve model performance.

*   Highlights potential outliers at the high end that might need specific handling.

#### **B. Boxplot by Year**
"""

plt.figure(figsize=(12,6))
sns.boxplot(x='year_of_production', y='price', data=df)
plt.xticks(rotation=45)
plt.title("Boxplot of Rolex Prices by Year")
plt.tight_layout()
plt.show()

"""*   **Median Price Trend**: Generally, the median price (the line inside each box)
appears to increase slightly over the years, although there are fluctuations.

*   **Price Range Widening**: The "box" (interquartile range) tends to become taller in later years, indicating a wider spread of prices for more recently produced watches.

*   **Increasing Outliers**: The number of outliers (circles above and below the boxes), representing unusually high or low prices, seems to increase significantly in recent years, especially after 2018. This suggests a greater diversity and potentially more extreme high-value models being produced or listed.

*   **Overall Higher Prices in Recent Years**: While the lower end of the price range remains relatively stable, the upper "whisker" and the outliers show that the maximum observed prices are considerably higher in the more recent years.

#### **4. Aggregate Prices by Year**

*   Groups the data by year and calculates the average price.

*   Prepares the data for time series modeling.
"""

ts = df.groupby('year_of_production')['price'].mean().reset_index()
ts.columns = ['year', 'avg_price']
ts.set_index('year', inplace=True)

"""#### **5. Average Price Trend Over Time**"""

plt.figure(figsize=(10, 5))
sns.lineplot(data=ts, x=ts.index, y='avg_price', marker='o')
plt.title("Average Rolex Price Trend (2010–2024)", fontsize=15)
plt.xlabel("Year")
plt.ylabel("Average Price (USD)")
plt.grid(True)
plt.tight_layout()
plt.show()

"""*   **Initial Increase**: The average price generally increased from 2010 to 2013.

*   **Sharp Fluctuation in 2013-2014**: There's a significant jump in average price in 2013 followed by a sharp drop in 2014.

*   **Steady Growth Post-2014**: After 2014, the average price shows a consistent upward trend, with some acceleration in later years.

*   **Peak Around 2021-2022**: The average price appears to have peaked around 2021 or 2022.

*   **Slight Decrease in Recent Years**: There's a slight dip in the average price in 2023 and 2024.


**Overall, while there were some early fluctuations, the average Rolex price has generally risen over the period, with a noticeable surge in the late 2010s and early 2020s before a slight recent decline.**

#### **6. Time Series Decomposition**
"""

result = seasonal_decompose(ts, model='additive', period=1)
result.plot()
plt.tight_layout()
plt.show()

"""*   **Trend**: Shows the underlying long-term direction of the average price, which is generally upward over the period, with a noticeable surge and then a slight leveling off.

*   **Seasonal**: Represents recurring patterns within a fixed period. In this case, the seasonal component is essentially flat at zero, indicating no significant year-to-year seasonal fluctuations in the average Rolex price.

*   **Residual**: Shows the random, irregular fluctuations left after removing the trend and seasonality. Here, the residuals are very close to zero, suggesting that the trend component explains most of the variation in the average price, and there isn't much random noise or other patterns.

**Essentially, the average Rolex price trend is mainly driven by a long-term upward movement with little to no consistent seasonal impact on a yearly basis. The fluctuations seen in the original data are largely captured by the trend.**

#### **7. ACF and PACF Plots**

**Helps identify the best ARIMA parameters:**

*   ACF: how the values correlate with their past values.

*   PACF: removes indirect correlation for clearer insight.
"""

fig, axes = plt.subplots(1, 2, figsize=(14, 4))
sgt.plot_acf(ts, ax=axes[0])
sgt.plot_pacf(ts, ax=axes[1])
axes[0].set_title("Autocorrelation (ACF)")
axes[1].set_title("Partial Autocorrelation (PACF)")
plt.tight_layout()
plt.show()

"""#### **8. Fit ARIMA Model**

**Fits an ARIMA model with order (p=1, d=1, q=1):**

*   p: autoregression lag

*   d: difference to make data stationary

*   q: moving average lag

**.summary() prints model coefficients and statistics.**
"""

model = ARIMA(ts, order=(1,1,1))
model_fit = model.fit()
print(model_fit.summary())

"""#### **9. Forecasting (2025–2027)**

*   Predicts the next 3 years of Rolex prices.

*   Retrieves forecast mean and 95% confidence intervals.
"""

# 🔮 Forecast Next 3 Years (2025–2027)
forecast_steps = 3
forecast_index = [2025, 2026, 2027]
forecast = model_fit.get_forecast(steps=forecast_steps)
forecast_mean = forecast.predicted_mean
conf_int = forecast.conf_int()

"""#### **10. Forecast Visualization**"""

# 📊 Forecast Visualization
plt.figure(figsize=(10, 5))
plt.plot(ts.index, ts['avg_price'], label='Historical')
plt.plot(forecast_index, forecast_mean, color='red', marker='o', label='Forecast (2025–2027)')
plt.fill_between(forecast_index, conf_int.iloc[:, 0], conf_int.iloc[:, 1], color='pink', alpha=0.3)
plt.title("Rolex Price Forecast (2025–2027)", fontsize=15) # Removed the Unicode character 🔮
plt.xlabel("Year")
plt.ylabel("Average Price (USD)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""*  **ACF (Autocorrelation Function)**: Shows the correlation of the time series with its own lagged values. Here, the significant spikes at lags 1, 2, and potentially 3 suggest that past values up to these lags have a direct influence on the current value. The gradual decay indicates a possible AR component.

*  **PACF (Partial Autocorrelation Function)**: Shows the correlation of the time series with its own lagged values, removing the influence of the intermediate lags. Here, the significant spikes are primarily at lags 1 and 2, and then it drops off sharply within the confidence interval. This strongly suggests an AR(2) process, meaning the current value is most directly influenced by the values from the previous two time periods.

**Therefore, based on these plots, an AR(2) model might be a good starting point for modeling the time series data. The significant initial lags in the ACF also hint at potential correlation that an AR model could capture.**

#### **11. Model Evaluation (Train-Test Split)**
"""

train = ts.iloc[:-2]
test = ts.iloc[-2:]

"""#### **12. Refit ARIMA on Training Data and Forecast for Testing Period**"""

model = ARIMA(train, order=(1,1,1))
model_fit = model.fit()
forecast = model_fit.get_forecast(steps=len(test))
forecast_mean = forecast.predicted_mean
conf_int = forecast.conf_int()

"""#### **13. Evaluation Metrics**

**Calculates RMSE and MAE:**


*   **RMSE**: penalizes large errors.

*   **MAE**: average absolute difference.
"""

rmse = np.sqrt(mean_squared_error(test['avg_price'], forecast_mean)) # Calculate RMSE by taking the square root of MSE
mae = mean_absolute_error(test['avg_price'], forecast_mean)
print(f"📉 RMSE: ${rmse:,.2f}")
print(f"📊 MAE: ${mae:,.2f}")

"""#### **14. Evaluation Visualization**"""

plt.figure(figsize=(12, 6))
plt.plot(train.index, train['avg_price'], label='Train')
plt.plot(test.index, test['avg_price'], label='Actual')
plt.plot(test.index, forecast_mean, label='Forecast', color='red', marker='o')
plt.fill_between(test.index, conf_int.iloc[:, 0], conf_int.iloc[:, 1], color='pink', alpha=0.3)
plt.title(f"🔍 ARIMA Evaluation (2010–2024) | RMSE: ${rmse:,.2f}", fontsize=14)
plt.xlabel("Year")
plt.ylabel("Average Price (USD)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""*  **Blue Line (Train)**: The average Rolex prices your model was trained on (up to 2022).

*  **Orange Line (Actual)**: The actual average Rolex prices for the forecast period (2023-2024).

*  **Red Line with Dots (Forecast)**: Your ARIMA model's predictions for the average Rolex prices in 2023 and 2024.

*  **Shaded Pink Area**: Represents the confidence interval around your forecast, indicating the uncertainty of the predictions.


**Key Takeaway: The forecast for 2023 and 2024 shows a slight downward trend, and the actual prices also show a decrease, though the model's forecast is somewhat higher than the actual values. The confidence interval widens further into the future, reflecting increasing uncertainty. The RMSE of $1,331.20 quantifies the average error of these predictions.**

#### **CONCLUSION**: The project successfully demonstrated the application of time series modeling using ARIMA to predict future Rolex watch prices. Through comprehensive EDA and decomposition analysis, significant price trends were observed over the years. The ARIMA(1,1,1) model provided reliable predictions, achieving low RMSE and MAE on the test set. The forecast suggests a continued rise in average Rolex prices from 2025 to 2027. These insights can be valuable for luxury watch collectors, investors, and resellers in making informed financial decisions.

---



---
"""